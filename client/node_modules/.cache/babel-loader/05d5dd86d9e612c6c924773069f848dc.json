{"ast":null,"code":"// export default (expenses, filters) => {\n//     return expenses.filter((expense) => {\n//         return expense.description.toLowerCase().includes(filters.text.toLowerCase())\n//     })\n// }\nexport default ((expenses, {\n  text,\n  sortBy,\n  startDate,\n  endDate\n}) => {\n  return expenses.filter(expense => {\n    const startDateMatch = typeof startDate !== 'number' || expense.createdAt >= startDate;\n    const endDateMatch = typeof endDate !== 'number' || expense.createdAt <= endDate;\n    const textMatch = expense.description.toLowerCase().includes(text.toLowerCase());\n    return startDateMatch && endDateMatch && textMatch;\n  }).sort((a, b) => {\n    if (sortBy === 'date') {\n      return a.createdAt < b.createdAt ? 1 : -1;\n    } else if (sortBy === 'amount') {\n      return a.amount < b.amount ? 1 : -1;\n    }\n  });\n});","map":{"version":3,"sources":["/Users/emmanuel/Desktop/Development/expenses-manager/client/src/utils/getVisibleExpenses.js"],"names":["expenses","text","sortBy","startDate","endDate","filter","expense","startDateMatch","createdAt","endDateMatch","textMatch","description","toLowerCase","includes","sort","a","b","amount"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAIA,gBAAe,CAACA,QAAD,EAAW;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAR;AAAgBC,EAAAA,SAAhB;AAA2BC,EAAAA;AAA3B,CAAX,KAAoD;AAC/D,SAAOJ,QAAQ,CAACK,MAAT,CAAiBC,OAAD,IAAa;AAChC,UAAMC,cAAc,GAAG,OAAOJ,SAAP,KAAqB,QAArB,IAAiCG,OAAO,CAACE,SAAR,IAAqBL,SAA7E;AACA,UAAMM,YAAY,GAAG,OAAOL,OAAP,KAAmB,QAAnB,IAA+BE,OAAO,CAACE,SAAR,IAAqBJ,OAAzE;AACA,UAAMM,SAAS,GAAGJ,OAAO,CAACK,WAAR,CAAoBC,WAApB,GAAkCC,QAAlC,CAA2CZ,IAAI,CAACW,WAAL,EAA3C,CAAlB;AAEA,WAAOL,cAAc,IAAIE,YAAlB,IAAkCC,SAAzC;AACH,GANM,EAMJI,IANI,CAMC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACd,QAAId,MAAM,KAAK,MAAf,EAAuB;AACnB,aAAOa,CAAC,CAACP,SAAF,GAAcQ,CAAC,CAACR,SAAhB,GAA4B,CAA5B,GAAgC,CAAC,CAAxC;AACH,KAFD,MAEO,IAAIN,MAAM,KAAK,QAAf,EAAyB;AAC5B,aAAOa,CAAC,CAACE,MAAF,GAAWD,CAAC,CAACC,MAAb,GAAsB,CAAtB,GAA0B,CAAC,CAAlC;AACH;AACJ,GAZM,CAAP;AAaH,CAdD","sourcesContent":["// export default (expenses, filters) => {\n//     return expenses.filter((expense) => {\n//         return expense.description.toLowerCase().includes(filters.text.toLowerCase())\n//     })\n// }\n\n\n\nexport default (expenses, { text, sortBy, startDate, endDate }) => {\n    return expenses.filter((expense) => {\n        const startDateMatch = typeof startDate !== 'number' || expense.createdAt >= startDate;\n        const endDateMatch = typeof endDate !== 'number' || expense.createdAt <= endDate;\n        const textMatch = expense.description.toLowerCase().includes(text.toLowerCase());\n\n        return startDateMatch && endDateMatch && textMatch;\n    }).sort((a, b) => {\n        if (sortBy === 'date') {\n            return a.createdAt < b.createdAt ? 1 : -1;\n        } else if (sortBy === 'amount') {\n            return a.amount < b.amount ? 1 : -1;\n        }\n    });\n};\n"]},"metadata":{},"sourceType":"module"}