{"ast":null,"code":"import _defineProperty from \"/Users/emmanuel/Desktop/Development/expenses-manager/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// //Expenses Reducers\n// const expensesDefaultState = {\n//   expenses: []\n// };\n// const expenseReducer = (state = expensesDefaultState, action) => {\n//   switch (action.type) {\n//     case \"ADD_EXPENSE\":\n//       return {\n//         ...state,\n//         expenses: [...state.expenses, action.payload]\n//         //NOTE: If the property is the same as the one in the defaultState, it will override otherwise it will add a new property to this array\n//       };\n//     case \"FETCH_EXPENSES\":\n//       return {\n//         ...state,\n//         expenses: action.payload\n//       };\n//     default:\n//       return state;\n//   }\n// };\n// export default expenseReducer;\n// Expenses Reducer\nconst expensesReducerDefaultState = [];\nexport default ((state = expensesReducerDefaultState, action) => {\n  switch (action.type) {\n    case 'ADD_EXPENSE':\n      return [...state, action.expense];\n\n    case 'REMOVE_EXPENSE':\n      return state.filter(({\n        id\n      }) => id !== action.id);\n\n    case 'EDIT_EXPENSE':\n      return state.map(expense => {\n        if (expense.id === action.id) {\n          return _objectSpread({}, expense, {}, action.updates);\n        } else {\n          return expense;\n        }\n\n        ;\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/emmanuel/Desktop/Development/expenses-manager/client/src/redux/reducers/expenses-reducers.js"],"names":["expensesReducerDefaultState","state","action","type","expense","filter","id","map","updates"],"mappings":";;;;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA,MAAMA,2BAA2B,GAAG,EAApC;AAEA,gBAAe,CAACC,KAAK,GAAGD,2BAAT,EAAsCE,MAAtC,KAAiD;AAC9D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,aAAO,CACL,GAAGF,KADE,EAELC,MAAM,CAACE,OAFF,CAAP;;AAIF,SAAK,gBAAL;AACE,aAAOH,KAAK,CAACI,MAAN,CAAa,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAYA,EAAE,KAAKJ,MAAM,CAACI,EAAvC,CAAP;;AACF,SAAK,cAAL;AACE,aAAOL,KAAK,CAACM,GAAN,CAAWH,OAAD,IAAa;AAC5B,YAAIA,OAAO,CAACE,EAAR,KAAeJ,MAAM,CAACI,EAA1B,EAA8B;AAC5B,mCACKF,OADL,MAEKF,MAAM,CAACM,OAFZ;AAID,SALD,MAKO;AACL,iBAAOJ,OAAP;AACD;;AAAA;AACF,OATM,CAAP;;AAUF;AACE,aAAOH,KAAP;AApBJ;AAsBD,CAvBD","sourcesContent":["// //Expenses Reducers\n\n// const expensesDefaultState = {\n//   expenses: []\n// };\n\n// const expenseReducer = (state = expensesDefaultState, action) => {\n//   switch (action.type) {\n//     case \"ADD_EXPENSE\":\n//       return {\n//         ...state,\n//         expenses: [...state.expenses, action.payload]\n//         //NOTE: If the property is the same as the one in the defaultState, it will override otherwise it will add a new property to this array\n//       };\n\n//     case \"FETCH_EXPENSES\":\n//       return {\n//         ...state,\n//         expenses: action.payload\n//       };\n//     default:\n//       return state;\n//   }\n// };\n\n// export default expenseReducer;\n\n\n// Expenses Reducer\n\nconst expensesReducerDefaultState = [];\n\nexport default (state = expensesReducerDefaultState, action) => {\n  switch (action.type) {\n    case 'ADD_EXPENSE':\n      return [\n        ...state,\n        action.expense\n      ];\n    case 'REMOVE_EXPENSE':\n      return state.filter(({ id }) => id !== action.id);\n    case 'EDIT_EXPENSE':\n      return state.map((expense) => {\n        if (expense.id === action.id) {\n          return {\n            ...expense,\n            ...action.updates\n          };\n        } else {\n          return expense;\n        };\n      });\n    default:\n      return state;\n  }\n};\n\n"]},"metadata":{},"sourceType":"module"}