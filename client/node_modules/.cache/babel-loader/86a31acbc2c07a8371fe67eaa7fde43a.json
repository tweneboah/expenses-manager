{"ast":null,"code":"var _jsxFileName = \"/Users/emmanuel/Desktop/Development/expenses-manager/client/src/Components/CreateExpenses/index.js\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport \"react-dates/initialize\";\nimport { SingleDatePicker } from \"react-dates\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport { addExpense } from '../../redux/actions/expenses-actions';\nimport store from '../../redux/store';\nimport { connect } from 'react-redux';\n\nclass CreateExpenses extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      description: '',\n      amount: '',\n      notes: '',\n      createdAt: moment(),\n      calendarFocused: false\n    };\n\n    this.onChangeInput = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onAmountChange = e => {\n      const amount = e.target.value;\n\n      if (amount.match(/^\\d*(\\.\\d{0,2})?$/)) {\n        this.setState(() => ({\n          amount\n        }));\n      }\n    };\n\n    this.onDateChange = createdAt => {\n      this.setState({\n        createdAt: createdAt\n      });\n    };\n\n    this.onFocusChange = ({\n      focused\n    }) => {\n      this.setState({\n        calendarFocused: focused\n      });\n    };\n\n    this.onFormSubmit = e => {\n      e.preventDefault(); //Calling the addExpense Action. Remember that for the date we need a number to comapre date range and also the mongoose createdAt date field also requires a number so we have to convert the value from the date which gives something like this 20.2.10\n\n      store.dispatch(addExpense({\n        description: this.state.description,\n        createdAt: this.state.createdAt.valueOf(),\n        notes: this.state.notes,\n        amount: this.state.amount\n      }));\n      store.dispatch(fetchExpenses()); //This will gives live update of listing without refreshing\n    };\n  }\n\n  componentDidMount() {\n    store.dispatch(fetchExpenses());\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Create Expenses\"), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Description\",\n      autoFocus: true,\n      value: this.state.description,\n      name: \"description\",\n      onChange: this.onChangeInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"number\",\n      placeholder: \"amount\",\n      value: this.amount,\n      name: \"amount\",\n      onChange: this.onAmountChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(SingleDatePicker, {\n      date: this.state.createdAt //The current date when the app runs, we will use moment = The date to start\n      ,\n      onDateChange: this.onDateChange,\n      focused: this.state.calendarFocused,\n      onFocusChange: this.onFocusChange,\n      numberOfMonths: 1 //select only one thus only one calendar\n      ,\n      isOutsideRange: () => false //This allows us to view all past date and current or future\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      placeholder: \"Add notes (optional)\",\n      value: this.notes,\n      name: \"notes\",\n      onChange: this.onChangeInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      onClick: this.onFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nexport default connect(null, {\n  fetchExpenses\n})(CreateExpenses);","map":{"version":3,"sources":["/Users/emmanuel/Desktop/Development/expenses-manager/client/src/Components/CreateExpenses/index.js"],"names":["React","Component","moment","SingleDatePicker","addExpense","store","connect","CreateExpenses","state","description","amount","notes","createdAt","calendarFocused","onChangeInput","e","setState","target","name","value","onAmountChange","match","onDateChange","onFocusChange","focused","onFormSubmit","preventDefault","dispatch","valueOf","fetchExpenses","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport moment from 'moment';\nimport \"react-dates/initialize\";\nimport { SingleDatePicker } from \"react-dates\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport { addExpense } from '../../redux/actions/expenses-actions';\nimport store from '../../redux/store'\nimport { connect } from 'react-redux';\n\nclass CreateExpenses extends Component {\n\n\n    state = {\n        description: '',\n        amount: '',\n        notes: '',\n        createdAt: moment(),\n        calendarFocused: false,\n\n    };\n\n    //changeinput\n    onChangeInput = e => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    };\n\n    //OnAmountChange\n\n    //We want to allow users to type in only numbers with decimal value so we will use a regression to achieve that\n    onAmountChange = e => {\n        const amount = e.target.value;\n\n        if (amount.match(/^\\d*(\\.\\d{0,2})?$/)) {\n            this.setState(() => ({ amount }));\n        }\n    };\n\n    onDateChange = createdAt => {\n        this.setState({\n            createdAt: createdAt\n        });\n    };\n    //Destructing the object and grab only focused and set them to state and this done automatically by react date api and this is how the documentation stated\n\n    //This is where react library changes the value\n    onFocusChange = ({ focused }) => {\n        this.setState({\n            calendarFocused: focused\n        });\n    };\n\n    //form submit\n\n    onFormSubmit = e => {\n        e.preventDefault();\n        //Calling the addExpense Action. Remember that for the date we need a number to comapre date range and also the mongoose createdAt date field also requires a number so we have to convert the value from the date which gives something like this 20.2.10\n        store.dispatch(addExpense({\n            description: this.state.description,\n            createdAt: this.state.createdAt.valueOf(),\n            notes: this.state.notes,\n            amount: this.state.amount\n        }));\n        store.dispatch(fetchExpenses())//This will gives live update of listing without refreshing\n\n    };\n\n\n    componentDidMount() {\n        store.dispatch(fetchExpenses())\n    }\n\n    render() {\n\n\n        return (\n            <div>\n                <h1>Create Expenses</h1>\n                <form>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Description\"\n                        autoFocus\n                        value={this.state.description}\n                        name=\"description\"\n                        onChange={this.onChangeInput}\n                    />\n\n                    <input\n                        type=\"number\"\n                        placeholder=\"amount\"\n                        value={this.amount}\n                        name=\"amount\"\n                        onChange={this.onAmountChange}\n                    />\n\n                    <SingleDatePicker\n                        date={this.state.createdAt} //The current date when the app runs, we will use moment = The date to start\n                        onDateChange={this.onDateChange}\n                        focused={this.state.calendarFocused}\n                        onFocusChange={this.onFocusChange}\n                        numberOfMonths={1} //select only one thus only one calendar\n                        isOutsideRange={() => false} //This allows us to view all past date and current or future\n                    />\n                    <textarea\n                        placeholder=\"Add notes (optional)\"\n                        value={this.notes}\n                        name=\"notes\"\n                        onChange={this.onChangeInput}\n                    ></textarea>\n\n                    <button type=\"submit\" onClick={this.onFormSubmit}>\n                        Submit\n          </button>\n                </form>\n\n\n\n            </div>\n        );\n    }\n}\n\n\n\nexport default connect(null, { fetchExpenses })(CreateExpenses);"]},"metadata":{},"sourceType":"module"}